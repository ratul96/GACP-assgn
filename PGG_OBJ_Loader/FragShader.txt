#version 430 core

// Input per-fragment data
// These must correspond to the varying outputs from the vertex shader
in vec3 vNormalV;
in vec2 texCoord;
in vec3 FragPos;

uniform vec3 viewPos;

// Input uniform data - these have values that will be the same for every fragment
uniform vec3 lightColors[4];
uniform vec3 lightPositions[4];

uniform vec3 red;
uniform float metallic;
uniform float roughness;
uniform float ao;

uniform samplerCube irrMap;
uniform samplerCube prefilMap;
uniform sampler2D brdfTex;

const float PI = 3.14159265359;

// The output of the fragment shader is the fragment's colour
out vec4 fragColour;

// This is another input to allow us to access a texture
//uniform sampler2D tex1;

vec3 fresnelSchlickRoughness(float cosTheta,vec3 F0,float roughness)
{
	return F0 + (max(vec3(1.0-roughness),F0)-F0)*pow(1.0-cosTheta,5.0);
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

void main()
{
	// Calculate the direction from the sample position to the light
	
	// Ensure the normal is a unit vector
	vec3 N = normalize( vNormalV );
	vec3 V=normalize(viewPos-FragPos);
	vec3 R=reflect(V,N);

	vec3 F0=vec3(0.04);
	F0=mix(F0,red,metallic);
	
	
	// Reflectance Equation
	vec3 Lo=vec3(0.0);
	for(int i=0;i<4;++i)
	{
		//per light radiance
		vec3 L=normalize(lightPositions[i]-FragPos);
		vec3 H=normalize(V+L);

		float distance=length(lightPositions[i]-FragPos);
		float attenuation=1.0/(distance*distance);
		vec3 radiance=lightColors[i]*attenuation;

		//Cook-Torrence BRDF
		vec3 F=fresnelSchlick(max(dot(H,V),0.0),F0);
		float NDF=DistributionGGX(N,H,roughness);
		float G=GeometrySmith( N, V, L, roughness);

		vec3 kS=F;
		vec3 kD=vec3(1.0)-kS;
		kD*=1.0-metallic;

		vec3 numerator=NDF*G*F;
		float denominator=4.0*max(dot(N,V),0.0)*max(dot(N,L),0.0)+0.001;
		vec3 specular=numerator/denominator;

		float NdotL=max(dot(N,L),0.0);
		Lo+=(kD*red/PI+specular)*radiance*NdotL;
	}
	

	vec3 F=fresnelSchlickRoughness(max(dot(N,V),0.0),F0,roughness);

	vec3 kS=F;
	vec3 kD=1.0-kS;
	kD*=1.0-metallic;

	vec3 irradiance=texture(irrMap,N).rgb;
	vec3 diffuse=irradiance*red;

	const float MAX_REFLECTION_LOD = 4.0;
	vec3 prefilterColour=textureLod(prefilMap,R,roughness*MAX_REFLECTION_LOD).rgb;
	vec2 brdf=texture(brdfTex,vec2(max(dot(N,V),0.0),roughness)).rg;
	vec3 specular=prefilterColour*(F*brdf.x+brdf.y);
	
	vec3 ambient=(kD*diffuse+specular)*ao;
	
	vec3 color=ambient+Lo;

	color=color/(color+vec3(1.0));
	color=pow(color,vec3(1.0/2.2));
	
	// If you want a separate texture for specular you will need to change this
	fragColour = vec4(color,1.0);
}
